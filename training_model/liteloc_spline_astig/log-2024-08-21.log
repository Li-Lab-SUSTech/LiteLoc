LiteLoc(
  (norm): BatchNorm2d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (layer0): Conv2DReLUBN(
    (conv): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (lrelu): ReLU()
    (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (pool1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (layer1): Conv2DReLUBN(
    (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (lrelu): ReLU()
    (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (layer2): Conv2DReLUBN(
    (conv): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (lrelu): ReLU()
    (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (layer3): Conv2DReLUBN(
    (conv): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (lrelu): ReLU()
    (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (layer30): Conv2DReLUBN(
    (conv): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (lrelu): ReLU()
    (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (layer4): Conv2DReLUBN(
    (conv): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
    (lrelu): ReLU()
    (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (layer5): Conv2DReLUBN(
    (conv): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
    (lrelu): ReLU()
    (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (layer6): Conv2DReLUBN(
    (conv): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(8, 8), dilation=(8, 8))
    (lrelu): ReLU()
    (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (layer7): Conv2DReLUBN(
    (conv): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(16, 16), dilation=(16, 16))
    (lrelu): ReLU()
    (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (deconv1): Conv2DReLUBN(
    (conv): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (lrelu): ReLU()
    (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (layerU1): Conv2DReLUBN(
    (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (lrelu): ReLU()
    (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (layerU2): Conv2DReLUBN(
    (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (lrelu): ReLU()
    (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (layerU3): Conv2DReLUBN(
    (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (lrelu): ReLU()
    (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (layerD3): Conv2DReLUBN(
    (conv): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (lrelu): ReLU()
    (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (layerD2): Conv2DReLUBN(
    (conv): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (lrelu): ReLU()
    (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (layerD1): Conv2DReLUBN(
    (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (lrelu): ReLU()
    (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (layerD0): Conv2DReLUBN(
    (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (lrelu): ReLU()
    (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (layerD00): Conv2DReLUBN(
    (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (lrelu): ReLU()
    (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
  (pred): Outnet(
    (p_out): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (xyzi_out): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (p_out1): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
    (xyzi_out1): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
    (xyzis_out1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (xyzis_out2): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
  )
)
number of parameters:  1332299
[INFO] Register count_normalization() for <class 'torch.nn.modules.batchnorm.BatchNorm2d'>.
[INFO] Register count_convNd() for <class 'torch.nn.modules.conv.Conv2d'>.
[INFO] Register zero_ops() for <class 'torch.nn.modules.activation.ReLU'>.
[INFO] Register zero_ops() for <class 'torch.nn.modules.pooling.MaxPool2d'>.
[INFO] Register count_avgpool() for <class 'torch.nn.modules.pooling.AvgPool2d'>.
Params:1.332M, MACs:771.817M, (input shape:torch.Size([1, 1, 128, 128]))
start training!
Epoch1/50
after FOV and border segmentation,truth: 3382 ,preds: 3209
Recall: 0.921
Precision: 0.971
Jaccard: 89.669
RMSE_lat: 30.374
RMSE_ax: 72.570
RMSE_vol: 84.330
Jaccard/RMSE: 2.952
Eff_lat: 67.917
Eff_ax: 62.273
Eff_3d: 65.095
FN: 266.0 FP: 93.0
 || Cost: 715.442 || BatchNr.: 500 || Time Upd.: 577.1 ms 
Epoch2/50
after FOV and border segmentation,truth: 3382 ,preds: 3268
Recall: 0.949
Precision: 0.982
Jaccard: 93.314
RMSE_lat: 23.822
RMSE_ax: 73.979
RMSE_vol: 81.289
Jaccard/RMSE: 3.917
Eff_lat: 75.257
Eff_ax: 62.411
Eff_3d: 68.834
FN: 172.0 FP: 58.0
 || Cost: 611.120 || BatchNr.: 1000 || Time Upd.: 549.8 ms 
Epoch3/50
after FOV and border segmentation,truth: 3382 ,preds: 3339
Recall: 0.963
Precision: 0.975
Jaccard: 93.968
RMSE_lat: 21.513
RMSE_ax: 58.595
RMSE_vol: 66.023
Jaccard/RMSE: 4.368
Eff_lat: 77.657
Eff_ax: 70.088
Eff_3d: 73.873
FN: 126.0 FP: 83.0
 || Cost: 467.690 || BatchNr.: 1500 || Time Upd.: 563.2 ms 
Epoch4/50
after FOV and border segmentation,truth: 3382 ,preds: 3319
Recall: 0.965
Precision: 0.983
Jaccard: 94.910
RMSE_lat: 20.210
RMSE_ax: 62.611
RMSE_vol: 68.826
Jaccard/RMSE: 4.696
Eff_lat: 79.159
Eff_ax: 68.283
Eff_3d: 73.721
FN: 119.0 FP: 56.0
 || Cost: 446.528 || BatchNr.: 2000 || Time Upd.: 456.4 ms 
Epoch5/50
after FOV and border segmentation,truth: 3382 ,preds: 3293
Recall: 0.965
Precision: 0.991
Jaccard: 95.690
RMSE_lat: 20.034
RMSE_ax: 49.939
RMSE_vol: 57.416
Jaccard/RMSE: 4.777
Eff_lat: 79.508
Eff_ax: 74.661
Eff_3d: 77.085
FN: 118.0 FP: 29.0
 || Cost: 422.739 || BatchNr.: 2500 || Time Upd.: 468.1 ms 
Epoch6/50
after FOV and border segmentation,truth: 3382 ,preds: 3287
Recall: 0.967
Precision: 0.995
Jaccard: 96.320
RMSE_lat: 19.054
RMSE_ax: 54.211
RMSE_vol: 60.539
Jaccard/RMSE: 5.055
Eff_lat: 80.594
Eff_ax: 72.646
Eff_3d: 76.620
FN: 110.0 FP: 15.0
 || Cost: 412.674 || BatchNr.: 3000 || Time Upd.: 458.5 ms 
Epoch7/50
after FOV and border segmentation,truth: 3382 ,preds: 3315
Recall: 0.974
Precision: 0.994
Jaccard: 96.855
RMSE_lat: 19.870
RMSE_ax: 49.932
RMSE_vol: 57.296
Jaccard/RMSE: 4.874
Eff_lat: 79.883
Eff_ax: 74.836
Eff_3d: 77.360
FN: 87.0 FP: 20.0
 || Cost: 395.638 || BatchNr.: 3500 || Time Upd.: 501.1 ms 
Epoch8/50
after FOV and border segmentation,truth: 3382 ,preds: 3325
Recall: 0.975
Precision: 0.992
Jaccard: 96.744
RMSE_lat: 19.653
RMSE_ax: 44.941
RMSE_vol: 52.841
Jaccard/RMSE: 4.923
Eff_lat: 80.079
Eff_ax: 77.295
Eff_3d: 78.687
FN: 84.0 FP: 27.0
 || Cost: 388.661 || BatchNr.: 4000 || Time Upd.: 457.6 ms 
Epoch9/50
after FOV and border segmentation,truth: 3382 ,preds: 3319
Recall: 0.976
Precision: 0.995
Jaccard: 97.088
RMSE_lat: 18.826
RMSE_ax: 46.046
RMSE_vol: 53.189
Jaccard/RMSE: 5.157
Eff_lat: 80.950
Eff_ax: 76.794
Eff_3d: 78.872
FN: 81.0 FP: 18.0
 || Cost: 379.302 || BatchNr.: 4500 || Time Upd.: 470.2 ms 
Epoch10/50
after FOV and border segmentation,truth: 3382 ,preds: 3326
Recall: 0.979
Precision: 0.996
Jaccard: 97.526
RMSE_lat: 18.536
RMSE_ax: 43.873
RMSE_vol: 51.107
Jaccard/RMSE: 5.262
Eff_lat: 81.300
Eff_ax: 77.925
Eff_3d: 79.612
FN: 70.0 FP: 14.0
 || Cost: 373.986 || BatchNr.: 5000 || Time Upd.: 542.8 ms 
Epoch11/50
after FOV and border segmentation,truth: 3382 ,preds: 3336
Recall: 0.977
Precision: 0.991
Jaccard: 96.836
RMSE_lat: 19.592
RMSE_ax: 44.383
RMSE_vol: 52.321
Jaccard/RMSE: 4.943
Eff_lat: 80.154
Eff_ax: 77.584
Eff_3d: 78.869
FN: 77.0 FP: 31.0
 || Cost: 367.304 || BatchNr.: 5500 || Time Upd.: 476.7 ms 
Epoch12/50
after FOV and border segmentation,truth: 3382 ,preds: 3327
Recall: 0.978
Precision: 0.994
Jaccard: 97.150
RMSE_lat: 18.756
RMSE_ax: 43.875
RMSE_vol: 51.270
Jaccard/RMSE: 5.180
Eff_lat: 81.029
Eff_ax: 77.878
Eff_3d: 79.454
FN: 76.0 FP: 21.0
 || Cost: 362.431 || BatchNr.: 6000 || Time Upd.: 474.5 ms 
Epoch13/50
after FOV and border segmentation,truth: 3382 ,preds: 3328
Recall: 0.977
Precision: 0.993
Jaccard: 97.005
RMSE_lat: 19.013
RMSE_ax: 44.437
RMSE_vol: 51.939
Jaccard/RMSE: 5.102
Eff_lat: 80.753
Eff_ax: 77.581
Eff_3d: 79.167
FN: 78.0 FP: 24.0
 || Cost: 358.656 || BatchNr.: 6500 || Time Upd.: 465.6 ms 
Epoch14/50
after FOV and border segmentation,truth: 3382 ,preds: 3321
Recall: 0.977
Precision: 0.995
Jaccard: 97.263
RMSE_lat: 19.384
RMSE_ax: 42.547
RMSE_vol: 50.614
Jaccard/RMSE: 5.018
Eff_lat: 80.424
Eff_ax: 78.551
Eff_3d: 79.487
FN: 77.0 FP: 16.0
 || Cost: 354.991 || BatchNr.: 7000 || Time Upd.: 464.5 ms 
Epoch15/50
after FOV and border segmentation,truth: 3382 ,preds: 3334
Recall: 0.981
Precision: 0.995
Jaccard: 97.646
RMSE_lat: 19.106
RMSE_ax: 42.592
RMSE_vol: 50.439
Jaccard/RMSE: 5.111
Eff_lat: 80.749
Eff_ax: 78.574
Eff_3d: 79.662
FN: 64.0 FP: 16.0
 || Cost: 350.494 || BatchNr.: 7500 || Time Upd.: 566.9 ms 
Epoch16/50
after FOV and border segmentation,truth: 3382 ,preds: 3336
Traceback (most recent call last):
  File "/home/feiyue/LiteLoc_spline/liteloc_train_demo.py", line 22, in <module>
    liteloc.train_spline()
  File "/home/feiyue/LiteLoc_spline/PSFLocModel.py", line 126, in train_spline
    self.evaluation_spline()  # todo: consecutive three frames like inference;
  File "/home/feiyue/LiteLoc_spline/PSFLocModel.py", line 159, in evaluation_spline
    pred_dict, match = self.EvalMetric.limited_matching(truth_list, pred_list)
  File "/home/feiyue/LiteLoc_spline/network/eval_utils.py", line 254, in limited_matching
    tests[r][-1] = -100  # photon cannot be negative, work as a flag
KeyboardInterrupt
